#include<bits/stdc++.h>
 using namespace std;
 int arr[100001]={0};
        struct info {
        long long int prop, sum;
         } tree[300003];
void init(int node, int b, int e)//1
{
    if (b == e)
    {
        tree[node].sum = arr[b];
        return;
    }
    int Left = node * 2;
    int Right = node * 2 + 1;
    int mid = (b + e) / 2;
    init(Left, b, mid);
    init(Right, mid + 1, e);
    tree[node].sum= tree[Left].sum+tree[Right].sum;

}

 int query(int node, int b, int e, int i, int j, int carry = 0)
{
    if (i > e || j < b)
        return 0;

    if (b >= i and e <= j)
        return tree[node].sum + carry * (e - b + 1);

    int Left = node << 1;
    int Right = (node << 1) + 1;
    int mid = (b + e) >> 1;

    int p1 = query(Left, b, mid, i, j, carry + tree[node].prop);
    int p2 = query(Right, mid + 1, e, i, j, carry + tree[node].prop);

    return p1 + p2;
}


void update(int node, int b, int e, int i, int j, long long int x)
{
    if (i > e || j < b)
        return;
    if (b >= i && e <= j)
    {
        tree[node].sum += ((e - b + 1) * x);
        tree[node].prop += x;
        return;
    }
    int Left = node * 2;
    int Right = (node * 2) + 1;
    int mid = (b + e) / 2;
    update(Left, b, mid, i, j, x);
    update(Right, mid + 1, e, i, j, x);
    tree[node].sum = tree[Left].sum + tree[Right].sum + (e - b + 1) * tree[node].prop;

}

int main()
{

    int n,i,x,y,t,j,k,q,z;
    scanf("%d", &t);
    for(j=1; j<=t; j++)
    {
        scanf("%d", &n);
        scanf("%d", &q);
        memset(&tree,0,sizeof tree);
        memset(arr,0,sizeof arr);
        printf("Case %d:\n", j);
        init(1,1,n);
        for(k=1; k<=q; k++)
        {
            scanf("%d", &x);
            if(x==0)
            {
                //add
                int a,b;
                long long int c;
                scanf("%d%d%d",&a,&b,&c);
                a=a+1;
                b=b+1;

                update(1,1,n,a,b,c);

            }
            else
            {
                int a,b;
                scanf("%d%d",&a,&b);
                a=a+1;
                b=b+1;
                int ans=query(1,1,n,a,b);
                printf("%d\n",ans);
            }

         }
    }
return 0;
}
